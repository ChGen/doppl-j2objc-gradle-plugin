/*
 * Copyright (c) 2015 the authors of j2objc-gradle (see AUTHORS file)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Based on https://plugins.gradle.org/docs/publish-plugin
buildscript {
    ext.kotlin_version = '1.1.60'

    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'groovy'
//apply plugin: 'kotlin'
apply plugin: 'java-gradle-plugin'
//apply from: "$rootDir/gradle/functional-test.gradle"

apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile gradleApi()
    compile localGroovy()
    testCompile gradleTestKit()
    compile 'com.android.tools.build:gradle:2.2.1'
    compile 'org.codehaus.groovy:groovy-android-gradle-plugin:1.1.0'
    compile 'com.google.code.gson:gson:2.7'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile 'junit:junit:4.11'
    testCompile 'commons-io:commons-io:2.4'

}

group = 'co.doppl'
//Changed this a whole number to differentiate it from the core stuff. Confusing.
version = '0.10.10'

project.tasks.all {
    if (it.name == 'publishPluginGroovyDocsJar' || it.name == 'publishPluginJavaDocsJar') {
        it.from(project.file('src/main/resources/'))
    }
}

configurations {
    includeInJar
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId 'gradle'
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url dopplMavenDeploy
        }
    }
}

ext.bintrayGitUrl ='https://github.com/doppllib/doppl-gradle.git'
ext.artifactId = 'gradle'

apply from: "$dopplSharedScriptHome/bintray.gradle"

File _pdir = project.file('testprojects')
File[] _dirs = _pdir.listFiles()

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def testJ2objcHome = properties.getProperty('j2objc.home')
def androidSdk = properties.getProperty('sdk.dir')

int count = _dirs.length
for(int i=0; i<count; i++)
{
    File d = _dirs[i]
    if(d.exists() && d.isDirectory())
    {
        File lprops = new File(d, "local.properties")
        lprops.delete()
        lprops << "j2objc.home=${testJ2objcHome}\nsdk.dir=${androidSdk}"
    }
}

task buildgenPropertiesFile {
    doLast {

        // needed for the first pass
        def folder = project.file('src/main/resources')
        if (!folder.exists()) {
            folder.mkdirs()
        }

        //write it to a propertiess file
        def props = project.file('src/main/resources/buildgen.properties')
        props.delete()
        props << "buildversion=${version}"
    }
}

processResources.dependsOn buildgenPropertiesFile

compileGroovy.dependsOn = compileGroovy.taskDependencies.values - 'compileJava'
compileKotlin.dependsOn compileGroovy
compileKotlin.classpath += files(compileGroovy.destinationDir)
classes.dependsOn compileKotlin